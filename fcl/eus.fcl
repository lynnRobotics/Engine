

FUNCTION_BLOCK eus	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	confidence1 : REAL;
	confidence2 : REAL;
	confidence3 : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	priority : REAL;
END_VAR

FUZZIFY confidence1		// Fuzzify input variable 
	TERM low := (0, 1) (0.2, 1) (0.5,0); 
	TERM mid := (0.2, 0) (0.5,1) (0.8,0);
	TERM high := (0.5, 0) (0.8, 1) (1,1);
END_FUZZIFY

FUZZIFY confidence2		// Fuzzify input variable 
	TERM low := (0, 1) (0.2, 1) (0.5,0); 
	TERM mid := (0.2, 0) (0.5,1) (0.8,0);
	TERM high := (0.5, 0) (0.8, 1) (1,1);
END_FUZZIFY

FUZZIFY confidence3		// Fuzzify input variable 
	TERM low := (0, 1) (0.2, 1) (0.5,0); 
	TERM mid := (0.2, 0) (0.5,1) (0.8,0);
	TERM high := (0.5, 0) (0.8, 1) (1,1);
END_FUZZIFY

DEFUZZIFY priority			// Defzzzify output variable 
	TERM p1 := (0,0) (1,1) (2,0);
	TERM p2 := (1,0) (2,1) (3,0);
	TERM p3 := (2,0) (3,1) (4,0);
	TERM p4 := (3,0) (4,1) (5,0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF confidence1 IS high THEN priority IS p1;
	RULE 2 : IF confidence1 IS mid THEN priority IS p2;
	RULE 3 : IF confidence1 IS low THEN priority IS p3;
	RULE 4 : IF confidence2 IS high THEN priority IS p3;
	RULE 5 : IF confidence2 IS mid THEN priority IS p2;
	RULE 6 : IF confidence2 IS low THEN priority IS p1;
	RULE 7 : IF confidence3 IS high THEN priority IS p4;
	RULE 8 : IF confidence3 IS mid THEN priority IS p3;
	RULE 9 : IF confidence3 IS low THEN priority IS p1;
END_RULEBLOCK

END_FUNCTION_BLOCK

